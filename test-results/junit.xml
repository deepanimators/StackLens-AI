<testsuites id="" name="" tests="416" failures="35" skipped="378" errors="0" time="22.672793">
<testsuite name="auth.setup.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="setup" tests="2" failures="0" skipped="0" time="16.942" errors="0">
<testcase name="authenticate user" classname="auth.setup.ts" time="16.653">
<system-out>
<![CDATA[Starting authentication setup...
No TEST_FIREBASE_TOKEN found, attempting sign-in flow...
]]>
</system-out>
<system-err>
<![CDATA[❌ Authentication setup failed: Error: Authentication failed: not redirected to authenticated page
    at [90mfile:///Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mtests/auth.setup.ts:65:31
    at [90mfile:///Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mtests/auth.setup.ts:61:17
    at [90m/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/workerMain.js:309:9
    at [90m/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/testInfo.js:326:11
    at TimeoutManager.withRunnable [90m(/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/timeoutManager.js:67:14[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/testInfo.js:324:7[90m)[39m
    at [90m/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/workerMain.js:307:7
    at WorkerMain._runTest [90m(/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/worker/workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/[39mnode_modules/[4mplaywright[24m/lib/common/process.js:65:22[90m)[39m
⚠️  Created minimal auth state. Tests requiring authentication will likely fail.
    To fix: Set TEST_FIREBASE_TOKEN environment variable
]]>
</system-err>
</testcase>
<testcase name="verify auth state" classname="auth.setup.ts" time="0.289">
<system-out>
<![CDATA[✓ Auth state file verified
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="api/auth-upload.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="api-tests" tests="11" failures="10" skipped="0" time="0.635" errors="0">
<testcase name="Authentication API › POST /api/auth/firebase-signin - should authenticate user" classname="api/auth-upload.test.ts" time="0.087">
<failure message="auth-upload.test.ts:11:5 POST /api/auth/firebase-signin - should authenticate user" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:11:5 › Authentication API › POST /api/auth/firebase-signin - should authenticate user 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      17 |         });
      18 |
    > 19 |         expect(response.status()).toBe(200);
         |                                   ^
      20 |
      21 |         const data = await response.json();
      22 |         expect(data).toHaveProperty('token');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/auth-upload.test.ts:19:35
]]>
</failure>
</testcase>
<testcase name="Authentication API › POST /api/auth/firebase-verify - should verify token" classname="api/auth-upload.test.ts" time="0.087">
<failure message="auth-upload.test.ts:27:5 POST /api/auth/firebase-verify - should verify token" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:27:5 › Authentication API › POST /api/auth/firebase-verify - should verify token 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      32 |         });
      33 |
    > 34 |         expect(response.status()).toBe(200);
         |                                   ^
      35 |
      36 |         const data = await response.json();
      37 |         expect(data).toHaveProperty('valid', true);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/auth-upload.test.ts:34:35
]]>
</failure>
</testcase>
<testcase name="Authentication API › GET /api/auth/me - should return current user" classname="api/auth-upload.test.ts" time="0.06">
<failure message="auth-upload.test.ts:41:5 GET /api/auth/me - should return current user" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:41:5 › Authentication API › GET /api/auth/me - should return current user 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="Authentication API › POST /api/auth/firebase-signin - should reject invalid token" classname="api/auth-upload.test.ts" time="0.069">
<failure message="auth-upload.test.ts:52:5 POST /api/auth/firebase-signin - should reject invalid token" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:52:5 › Authentication API › POST /api/auth/firebase-signin - should reject invalid token 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 400

      57 |         });
      58 |
    > 59 |         expect(response.status()).toBe(401);
         |                                   ^
      60 |
      61 |         const data = await response.json();
      62 |         expect(data).toHaveProperty('message');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/auth-upload.test.ts:59:35
]]>
</failure>
</testcase>
<testcase name="Authentication API › GET /api/auth/me - should reject unauthenticated request" classname="api/auth-upload.test.ts" time="0.086">
</testcase>
<testcase name="File Upload API › POST /api/upload - should upload Excel file" classname="api/auth-upload.test.ts" time="0.049">
<failure message="auth-upload.test.ts:79:5 POST /api/upload - should upload Excel file" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:79:5 › File Upload API › POST /api/upload - should upload Excel file 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="File Upload API › POST /api/upload - should upload CSV file" classname="api/auth-upload.test.ts" time="0.048">
<failure message="auth-upload.test.ts:98:5 POST /api/upload - should upload CSV file" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:98:5 › File Upload API › POST /api/upload - should upload CSV file 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="File Upload API › POST /api/upload - should reject invalid file type" classname="api/auth-upload.test.ts" time="0.048">
<failure message="auth-upload.test.ts:112:5 POST /api/upload - should reject invalid file type" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:112:5 › File Upload API › POST /api/upload - should reject invalid file type 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="File Upload API › GET /api/files - should list uploaded files" classname="api/auth-upload.test.ts" time="0.049">
<failure message="auth-upload.test.ts:130:5 GET /api/files - should list uploaded files" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:130:5 › File Upload API › GET /api/files - should list uploaded files 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="File Upload API › GET /api/files/:id - should get file details" classname="api/auth-upload.test.ts" time="0.006">
<failure message="auth-upload.test.ts:145:5 GET /api/files/:id - should get file details" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:145:5 › File Upload API › GET /api/files/:id - should get file details 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
<testcase name="File Upload API › DELETE /api/files/:id - should delete file" classname="api/auth-upload.test.ts" time="0.046">
<failure message="auth-upload.test.ts:169:5 DELETE /api/files/:id - should delete file" type="FAILURE">
<![CDATA[  [api-tests] › api/auth-upload.test.ts:169:5 › File Upload API › DELETE /api/files/:id - should delete file 

    SyntaxError: Unexpected end of JSON input

       at fixtures.ts:52

      50 |         });
      51 |
    > 52 |         const { token } = await response.json();
         |                           ^
      53 |
      54 |         // Dispose current context and create authenticated one
      55 |         await apiContext.dispose();
        at Object.apiContext (/Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/fixtures.ts:52:27)
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="api/comprehensive.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="api-tests" tests="89" failures="25" skipped="64" time="1.155" errors="0">
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should retrieve all errors" classname="api/comprehensive.test.ts" time="0.049">
<failure message="comprehensive.test.ts:5:9 should retrieve all errors" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:5:9 › API Tests - Error Management Endpoints › GET /api/errors › should retrieve all errors 

    Error: expect(received).toBeTruthy()

    Received: false

       6 |             const response = await request.get('http://localhost:5000/api/errors');
       7 |
    >  8 |             expect(response.ok()).toBeTruthy();
         |                                   ^
       9 |             const errors = await response.json();
      10 |             expect(Array.isArray(errors)).toBeTruthy();
      11 |         });
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:8:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should support pagination" classname="api/comprehensive.test.ts" time="0.047">
<failure message="comprehensive.test.ts:13:9 should support pagination" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:13:9 › API Tests - Error Management Endpoints › GET /api/errors › should support pagination 

    Error: expect(received).toBeTruthy()

    Received: false

      14 |             const response = await request.get('http://localhost:5000/api/errors?page=1&limit=10');
      15 |
    > 16 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      17 |             const data = await response.json();
      18 |             expect(data).toHaveProperty('errors');
      19 |             expect(data).toHaveProperty('total');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:16:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should filter by severity" classname="api/comprehensive.test.ts" time="0.046">
<failure message="comprehensive.test.ts:25:9 should filter by severity" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:25:9 › API Tests - Error Management Endpoints › GET /api/errors › should filter by severity 

    Error: expect(received).toBeTruthy()

    Received: false

      26 |             const response = await request.get('http://localhost:5000/api/errors?severity=critical');
      27 |
    > 28 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      29 |             const errors = await response.json();
      30 |             errors.forEach((error: any) => {
      31 |                 expect(error.severity).toBe('critical');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:28:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should filter by error type" classname="api/comprehensive.test.ts" time="0.045">
<failure message="comprehensive.test.ts:35:9 should filter by error type" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:35:9 › API Tests - Error Management Endpoints › GET /api/errors › should filter by error type 

    Error: expect(received).toBeTruthy()

    Received: false

      36 |             const response = await request.get('http://localhost:5000/api/errors?errorType=Runtime');
      37 |
    > 38 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      39 |             const errors = await response.json();
      40 |             errors.forEach((error: any) => {
      41 |                 expect(error.errorType).toBe('Runtime');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:38:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should filter by date range" classname="api/comprehensive.test.ts" time="0.045">
<failure message="comprehensive.test.ts:45:9 should filter by date range" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:45:9 › API Tests - Error Management Endpoints › GET /api/errors › should filter by date range 

    Error: expect(received).toBeTruthy()

    Received: false

      51 |             );
      52 |
    > 53 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      54 |         });
      55 |
      56 |         test('should search by message', async ({ request }) => {
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:53:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should search by message" classname="api/comprehensive.test.ts" time="0.046">
<failure message="comprehensive.test.ts:56:9 should search by message" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:56:9 › API Tests - Error Management Endpoints › GET /api/errors › should search by message 

    Error: expect(received).toBeTruthy()

    Received: false

      57 |             const response = await request.get('http://localhost:5000/api/errors?search=database');
      58 |
    > 59 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      60 |             const errors = await response.json();
      61 |             errors.forEach((error: any) => {
      62 |                 expect(error.message.toLowerCase()).toContain('database');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:59:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should filter by resolved status" classname="api/comprehensive.test.ts" time="0.039">
<failure message="comprehensive.test.ts:66:9 should filter by resolved status" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:66:9 › API Tests - Error Management Endpoints › GET /api/errors › should filter by resolved status 

    Error: expect(received).toBeTruthy()

    Received: false

      67 |             const response = await request.get('http://localhost:5000/api/errors?resolved=false');
      68 |
    > 69 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      70 |             const errors = await response.json();
      71 |             errors.forEach((error: any) => {
      72 |                 expect(error.resolved).toBe(false);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:69:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should filter by store" classname="api/comprehensive.test.ts" time="0.045">
<failure message="comprehensive.test.ts:76:9 should filter by store" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:76:9 › API Tests - Error Management Endpoints › GET /api/errors › should filter by store 

    Error: expect(received).toBeTruthy()

    Received: false

      77 |             const response = await request.get('http://localhost:5000/api/errors?store=STORE-0001');
      78 |
    > 79 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      80 |             const errors = await response.json();
      81 |             errors.forEach((error: any) => {
      82 |                 expect(error.store).toBe('STORE-0001');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:79:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should support sorting" classname="api/comprehensive.test.ts" time="0.046">
<failure message="comprehensive.test.ts:86:9 should support sorting" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:86:9 › API Tests - Error Management Endpoints › GET /api/errors › should support sorting 

    Error: expect(received).toBeTruthy()

    Received: false

      87 |             const response = await request.get('http://localhost:5000/api/errors?sortBy=timestamp&order=desc');
      88 |
    > 89 |             expect(response.ok()).toBeTruthy();
         |                                   ^
      90 |             const errors = await response.json();
      91 |
      92 |             // Verify descending order
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:89:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors › should handle invalid query parameters gracefully" classname="api/comprehensive.test.ts" time="0.044">
<failure message="comprehensive.test.ts:100:9 should handle invalid query parameters gracefully" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:100:9 › API Tests - Error Management Endpoints › GET /api/errors › should handle invalid query parameters gracefully 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      101 |             const response = await request.get('http://localhost:5000/api/errors?page=-1&limit=1000');
      102 |
    > 103 |             expect(response.status()).toBe(400);
          |                                       ^
      104 |             const error = await response.json();
      105 |             expect(error).toHaveProperty('error');
      106 |         });
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:103:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors › should create new error" classname="api/comprehensive.test.ts" time="0.048">
<failure message="comprehensive.test.ts:110:9 should create new error" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:110:9 › API Tests - Error Management Endpoints › POST /api/errors › should create new error 

    Error: expect(received).toBeTruthy()

    Received: false

      122 |             });
      123 |
    > 124 |             expect(response.ok()).toBeTruthy();
          |                                   ^
      125 |             const created = await response.json();
      126 |             expect(created).toHaveProperty('id');
      127 |             expect(created.message).toBe(newError.message);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:124:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors › should validate required fields" classname="api/comprehensive.test.ts" time="0.046">
<failure message="comprehensive.test.ts:131:9 should validate required fields" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:131:9 › API Tests - Error Management Endpoints › POST /api/errors › should validate required fields 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      139 |             });
      140 |
    > 141 |             expect(response.status()).toBe(400);
          |                                       ^
      142 |             const error = await response.json();
      143 |             expect(error).toHaveProperty('error');
      144 |         });
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:141:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors › should validate severity values" classname="api/comprehensive.test.ts" time="0.05">
<failure message="comprehensive.test.ts:146:9 should validate severity values" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:146:9 › API Tests - Error Management Endpoints › POST /api/errors › should validate severity values 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      155 |             });
      156 |
    > 157 |             expect(response.status()).toBe(400);
          |                                       ^
      158 |         });
      159 |
      160 |         test('should set default values for optional fields', async ({ request }) => {
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:157:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors › should set default values for optional fields" classname="api/comprehensive.test.ts" time="0.048">
<failure message="comprehensive.test.ts:160:9 should set default values for optional fields" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:160:9 › API Tests - Error Management Endpoints › POST /api/errors › should set default values for optional fields 

    Error: expect(received).toBeTruthy()

    Received: false

      169 |             });
      170 |
    > 171 |             expect(response.ok()).toBeTruthy();
          |                                   ^
      172 |             const created = await response.json();
      173 |             expect(created).toHaveProperty('timestamp');
      174 |             expect(created).toHaveProperty('resolved');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:171:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/:id › should retrieve specific error by ID" classname="api/comprehensive.test.ts" time="0.047">
<failure message="comprehensive.test.ts:180:9 should retrieve specific error by ID" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:180:9 › API Tests - Error Management Endpoints › GET /api/errors/:id › should retrieve specific error by ID 

    SyntaxError: Unexpected end of JSON input

      190 |             });
      191 |
    > 192 |             const created = await createResponse.json();
          |                             ^
      193 |
      194 |             // Retrieve the error
      195 |             const getResponse = await request.get(`http://localhost:5000/api/errors/${created.id}`);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:192:29
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/:id › should return 404 for non-existent error" classname="api/comprehensive.test.ts" time="0.049">
<failure message="comprehensive.test.ts:203:9 should return 404 for non-existent error" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:203:9 › API Tests - Error Management Endpoints › GET /api/errors/:id › should return 404 for non-existent error 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 403

      203 |         test('should return 404 for non-existent error', async ({ request }) => {
      204 |             const response = await request.get('http://localhost:5000/api/errors/99999999');
    > 205 |             expect(response.status()).toBe(404);
          |                                       ^
      206 |         });
      207 |
      208 |         test('should return 400 for invalid ID format', async ({ request }) => {
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:205:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/:id › should return 400 for invalid ID format" classname="api/comprehensive.test.ts" time="0.049">
<failure message="comprehensive.test.ts:208:9 should return 400 for invalid ID format" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:208:9 › API Tests - Error Management Endpoints › GET /api/errors/:id › should return 400 for invalid ID format 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      208 |         test('should return 400 for invalid ID format', async ({ request }) => {
      209 |             const response = await request.get('http://localhost:5000/api/errors/invalid-id');
    > 210 |             expect(response.status()).toBe(400);
          |                                       ^
      211 |         });
      212 |     });
      213 |
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:210:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › PATCH /api/errors/:id › should update error fields" classname="api/comprehensive.test.ts" time="0.045">
<failure message="comprehensive.test.ts:215:9 should update error fields" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:215:9 › API Tests - Error Management Endpoints › PATCH /api/errors/:id › should update error fields 

    SyntaxError: Unexpected end of JSON input

      225 |             });
      226 |
    > 227 |             const created = await createResponse.json();
          |                             ^
      228 |
      229 |             // Update error
      230 |             const updates = {
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:227:29
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › PATCH /api/errors/:id › should validate updated field values" classname="api/comprehensive.test.ts" time="0.05">
<failure message="comprehensive.test.ts:248:9 should validate updated field values" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:248:9 › API Tests - Error Management Endpoints › PATCH /api/errors/:id › should validate updated field values 

    SyntaxError: Unexpected end of JSON input

      251 |             });
      252 |
    > 253 |             const created = await createResponse.json();
          |                             ^
      254 |
      255 |             const invalidUpdate = {
      256 |                 severity: 'invalid_value'
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:253:29
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › PATCH /api/errors/:id › should return 404 when updating non-existent error" classname="api/comprehensive.test.ts" time="0.048">
<failure message="comprehensive.test.ts:266:9 should return 404 when updating non-existent error" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:266:9 › API Tests - Error Management Endpoints › PATCH /api/errors/:id › should return 404 when updating non-existent error 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 403

      269 |             });
      270 |
    > 271 |             expect(response.status()).toBe(404);
          |                                       ^
      272 |         });
      273 |     });
      274 |
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:271:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › DELETE /api/errors/:id › should delete error" classname="api/comprehensive.test.ts" time="0.044">
<failure message="comprehensive.test.ts:276:9 should delete error" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:276:9 › API Tests - Error Management Endpoints › DELETE /api/errors/:id › should delete error 

    SyntaxError: Unexpected end of JSON input

      286 |             });
      287 |
    > 288 |             const created = await createResponse.json();
          |                             ^
      289 |
      290 |             // Delete error
      291 |             const deleteResponse = await request.delete(`http://localhost:5000/api/errors/${created.id}`);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:288:29
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › DELETE /api/errors/:id › should return 404 when deleting non-existent error" classname="api/comprehensive.test.ts" time="0.042">
<failure message="comprehensive.test.ts:299:9 should return 404 when deleting non-existent error" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:299:9 › API Tests - Error Management Endpoints › DELETE /api/errors/:id › should return 404 when deleting non-existent error 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 403

      299 |         test('should return 404 when deleting non-existent error', async ({ request }) => {
      300 |             const response = await request.delete('http://localhost:5000/api/errors/99999999');
    > 301 |             expect(response.status()).toBe(404);
          |                                       ^
      302 |         });
      303 |     });
      304 |
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:301:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors/bulk › should create multiple errors in bulk" classname="api/comprehensive.test.ts" time="0.047">
<failure message="comprehensive.test.ts:306:9 should create multiple errors in bulk" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:306:9 › API Tests - Error Management Endpoints › POST /api/errors/bulk › should create multiple errors in bulk 

    Error: expect(received).toBeTruthy()

    Received: false

      315 |             });
      316 |
    > 317 |             expect(response.ok()).toBeTruthy();
          |                                   ^
      318 |             const result = await response.json();
      319 |             expect(result).toHaveProperty('created');
      320 |             expect(result.created).toBe(3);
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:317:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors/bulk › should handle validation errors in bulk creation" classname="api/comprehensive.test.ts" time="0.046">
<failure message="comprehensive.test.ts:325:9 should handle validation errors in bulk creation" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:325:9 › API Tests - Error Management Endpoints › POST /api/errors/bulk › should handle validation errors in bulk creation 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      333 |             });
      334 |
    > 335 |             expect(response.status()).toBe(400);
          |                                       ^
      336 |             const error = await response.json();
      337 |             expect(error).toHaveProperty('invalidIndices');
      338 |         });
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:335:39
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/stats › should retrieve error statistics" classname="api/comprehensive.test.ts" time="0.044">
<failure message="comprehensive.test.ts:342:9 should retrieve error statistics" type="FAILURE">
<![CDATA[  [api-tests] › api/comprehensive.test.ts:342:9 › API Tests - Error Management Endpoints › GET /api/errors/stats › should retrieve error statistics 

    Error: expect(received).toBeTruthy()

    Received: false

      343 |             const response = await request.get('http://localhost:5000/api/errors/stats');
      344 |
    > 345 |             expect(response.ok()).toBeTruthy();
          |                                   ^
      346 |             const stats = await response.json();
      347 |             expect(stats).toHaveProperty('total');
      348 |             expect(stats).toHaveProperty('bySeverity');
        at /Users/deepak/Downloads/Projects/StackLens-AI-Deploy/tests/api/comprehensive.test.ts:345:35
]]>
</failure>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/stats › should filter statistics by date range" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Management Endpoints › GET /api/errors/stats › should provide statistics by store" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors/export › should export errors as CSV" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors/export › should export errors as JSON" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Management Endpoints › POST /api/errors/export › should export errors as Excel" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › GET /api/stores › should retrieve all stores" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › GET /api/stores › should support pagination for stores" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › GET /api/stores › should search stores by name" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › POST /api/stores › should create new store" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › POST /api/stores › should prevent duplicate store numbers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › GET /api/kiosks › should retrieve all kiosks" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › GET /api/kiosks › should filter kiosks by store" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › POST /api/kiosks › should create new kiosk" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Store &amp; Kiosk Management › POST /api/kiosks › should validate kiosk belongs to valid store" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › POST /api/ml/train › should initiate ML training job" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › POST /api/ml/train › should validate training configuration" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › GET /api/ml/jobs/:jobId › should retrieve training job status" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › POST /api/ml/predict › should make prediction with trained model" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › GET /api/ml/models › should list all trained models" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - ML Training Endpoints › GET /api/ml/models › should filter models by status" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - AI Analysis Endpoints › POST /api/ai/analyze › should analyze error with AI" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - AI Analysis Endpoints › POST /api/ai/analyze › should handle timeout for long-running analysis" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - AI Analysis Endpoints › POST /api/ai/suggest › should provide fix suggestions" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - AI Analysis Endpoints › POST /api/ai/summarize › should summarize multiple errors" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - File Upload &amp; Processing › POST /api/upload › should handle Excel file upload" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - File Upload &amp; Processing › POST /api/upload › should reject files exceeding size limit" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - File Upload &amp; Processing › POST /api/upload › should reject unsupported file types" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - File Upload &amp; Processing › GET /api/uploads/:fileId › should retrieve upload status" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Authentication &amp; Authorization › POST /api/auth/firebase › should authenticate with valid Firebase token" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Authentication &amp; Authorization › POST /api/auth/firebase › should reject invalid token" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Authentication &amp; Authorization › POST /api/auth/logout › should logout user" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Authentication &amp; Authorization › GET /api/admin/users › should require admin role" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Authentication &amp; Authorization › GET /api/admin/users › should allow access with admin token" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should reject requests with invalid Content-Type" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should validate JSON syntax" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should enforce maximum payload size" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should validate required headers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should handle missing request body" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should validate URL parameter formats" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Request Validation › should handle special characters in query params" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Response Format Validation › should return proper Content-Type headers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Response Format Validation › should include CORS headers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Response Format Validation › should return consistent error response format" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Response Format Validation › should include pagination metadata" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Response Format Validation › should return timestamps in ISO format" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Handling › should handle database connection errors gracefully" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Handling › should return 404 for non-existent routes" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Handling › should handle malformed route parameters" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Handling › should provide helpful error messages" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Error Handling › should handle concurrent request failures" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Rate Limiting › should implement rate limiting" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Rate Limiting › should include rate limit headers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Rate Limiting › should reset rate limits after time window" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Pagination Edge Cases › should handle page=0" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Pagination Edge Cases › should handle negative page numbers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Pagination Edge Cases › should handle excessive page numbers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Pagination Edge Cases › should handle limit=0" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Pagination Edge Cases › should enforce maximum limit" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Concurrent Operations › should handle concurrent reads safely" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Concurrent Operations › should handle concurrent writes with proper isolation" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Concurrent Operations › should prevent race conditions on updates" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Cache Control › should include appropriate cache headers" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Cache Control › should respect If-None-Match for conditional requests" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Tests - Cache Control › should support If-Modified-Since" classname="api/comprehensive.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="unit/utilities.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="unit-tests" tests="49" failures="0" skipped="49" time="0" errors="0">
<testcase name="Unit Tests - Utilities › cn() - Class Name Utility › should merge class names" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Utilities › cn() - Class Name Utility › should handle conditional classes" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Utilities › cn() - Class Name Utility › should handle undefined and null values" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Utilities › cn() - Class Name Utility › should merge tailwind classes correctly" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Utilities › buildApiUrl() - API URL Builder › should build API URL with path" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Utilities › buildApiUrl() - API URL Builder › should handle paths without leading slash" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Error Handling › should validate error log structure" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Error Handling › should validate severity levels" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Error Handling › should validate error types" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Data Validation › should validate file upload constraints" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Data Validation › should validate store/kiosk number format" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Data Validation › should validate pagination parameters" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Date/Time Utilities › should format dates correctly" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Date/Time Utilities › should calculate time differences" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Date/Time Utilities › should validate timestamp ranges" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Filter Logic › should filter by severity" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Filter Logic › should filter by multiple criteria" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Filter Logic › should handle empty filter results" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Search Functionality › should search by message content" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Search Functionality › should be case-insensitive" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Search Functionality › should handle special characters in search" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Sorting Logic › should sort by timestamp descending" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Sorting Logic › should sort by severity priority" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Export Functionality › should format data for CSV export" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Export Functionality › should escape special characters for CSV" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Export Functionality › should handle null values in CSV export" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Export Functionality › should format timestamps for export" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Export Functionality › should handle large datasets for export" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - URL and Path Utilities › should validate URL format" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - URL and Path Utilities › should extract query parameters from URL" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - URL and Path Utilities › should build URLs with query parameters" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - URL and Path Utilities › should handle URL encoding" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Math and Statistics › should calculate average severity" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Math and Statistics › should calculate percentage distribution" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Math and Statistics › should calculate error rate trends" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Math and Statistics › should identify outliers" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - String Utilities › should truncate long messages" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - String Utilities › should sanitize HTML in error messages" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - String Utilities › should format error codes" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - String Utilities › should convert camelCase to readable format" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - String Utilities › should highlight search terms" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Array Utilities › should remove duplicates from array" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Array Utilities › should group errors by severity" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Array Utilities › should chunk array into batches" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Array Utilities › should find intersection of arrays" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Validation Rules › should validate email format" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Validation Rules › should validate phone numbers" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Validation Rules › should validate IP addresses" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Unit Tests - Validation Rules › should validate numeric ranges" classname="unit/utilities.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration/services.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="integration-tests" tests="40" failures="0" skipped="40" time="0" errors="0">
<testcase name="Integration Tests - Services › ML Service Integration › should train model with valid data" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › ML Service Integration › should make predictions with trained model" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › ML Service Integration › should handle invalid training data" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › AI Service Integration › should analyze error with AI" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › AI Service Integration › should generate error summary" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › AI Service Integration › should suggest fixes for error" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Database Service Integration › should create and retrieve error" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Database Service Integration › should update error status" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Database Service Integration › should delete error" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Database Service Integration › should handle concurrent database operations" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Auth Service Integration › should authenticate user and create session" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Auth Service Integration › should reject invalid authentication" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › Auth Service Integration › should verify admin permissions" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › File Upload Integration › should upload Excel file and process errors" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Services › File Upload Integration › should upload and analyze log file" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Service Interactions › should chain AI analysis with ML prediction" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Service Interactions › should upload file and trigger AI analysis" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Service Interactions › should process error through complete pipeline" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Consistency › should maintain consistency across store updates" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Consistency › should handle transaction rollback on failure" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Caching and Performance › should cache frequent queries" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Caching and Performance › should handle rate limiting gracefully" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Caching and Performance › should implement query result pagination efficiently" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Error Recovery › should recover from temporary database errors" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Error Recovery › should handle circuit breaker pattern" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Error Recovery › should implement graceful degradation" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Security › should validate authentication tokens" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Security › should prevent SQL injection in queries" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Security › should sanitize user input" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Security › should enforce CORS policies" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Validation › should validate required fields on creation" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Validation › should validate data types" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Validation › should validate enum values" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Data Validation › should enforce maximum string lengths" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Webhooks and Notifications › should trigger webhook on critical error" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Webhooks and Notifications › should send notifications for escalated errors" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Batch Operations › should process batch updates efficiently" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Batch Operations › should handle batch deletion atomically" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Real-time Updates › should support server-sent events for real-time updates" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests - Real-time Updates › should broadcast changes to connected clients" classname="integration/services.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/auth.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Authentication › should display login page" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should login with Google successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should display user profile after login" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should logout successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should persist session on page reload" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should handle authentication errors" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/dashboard.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-chromium" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Error Dashboard › should display dashboard with error statistics" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error severity breakdown" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by store" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by kiosk" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by date range" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should apply multiple filters together" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should clear all filters" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should search errors by keyword" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should paginate through error results" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should change items per page" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by date" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to CSV" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to Excel" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error details on click" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should mark error as resolved" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display real-time updates" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/enhanced.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-chromium" tests="40" failures="0" skipped="40" time="0" errors="0">
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › concurrent users editing same error" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › collaborative analysis workflow" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle network failures gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle API errors and retry" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle session timeout" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle upload errors and validation" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle ML training failures" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle large datasets efficiently" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle rapid filter changes without lag" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle concurrent API requests" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › prevent unauthorized access to admin pages" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › sanitize user input to prevent XSS" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › validate CSRF protection" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › verify data consistency across operations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › handle optimistic updates correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › keyboard navigation works correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › screen reader support" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › color contrast meets WCAG standards" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Chromium" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Firefox" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in WebKit/Safari" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles CSS Grid across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles Flexbox across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone SE viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone 12 Pro viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad Pro viewport (landscape)" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › Android phone viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error report as PDF" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error log as text file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › export multiple errors to Excel" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › upload and process CSV file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › handle file upload errors gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display error screenshots" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › lazy load images in gallery" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display chart visualizations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › print error report" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › generate shareable link" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › receive real-time error notifications" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › sync status updates across sessions" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/upload.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-chromium" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="File Upload and Analysis › should upload Excel file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload CSV file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload log file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject invalid file types" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject files larger than limit" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should trigger AI analysis after upload" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display error detection results" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display AI suggestions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display ML predictions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should navigate to error details" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should handle upload errors gracefully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/auth.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Authentication › should display login page" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should login with Google successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should display user profile after login" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should logout successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should persist session on page reload" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should handle authentication errors" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/dashboard.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-firefox" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Error Dashboard › should display dashboard with error statistics" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error severity breakdown" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by store" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by kiosk" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by date range" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should apply multiple filters together" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should clear all filters" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should search errors by keyword" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should paginate through error results" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should change items per page" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by date" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to CSV" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to Excel" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error details on click" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should mark error as resolved" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display real-time updates" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/enhanced.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-firefox" tests="40" failures="0" skipped="40" time="0" errors="0">
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › concurrent users editing same error" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › collaborative analysis workflow" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle network failures gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle API errors and retry" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle session timeout" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle upload errors and validation" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle ML training failures" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle large datasets efficiently" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle rapid filter changes without lag" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle concurrent API requests" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › prevent unauthorized access to admin pages" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › sanitize user input to prevent XSS" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › validate CSRF protection" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › verify data consistency across operations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › handle optimistic updates correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › keyboard navigation works correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › screen reader support" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › color contrast meets WCAG standards" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Chromium" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Firefox" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in WebKit/Safari" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles CSS Grid across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles Flexbox across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone SE viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone 12 Pro viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad Pro viewport (landscape)" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › Android phone viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error report as PDF" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error log as text file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › export multiple errors to Excel" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › upload and process CSV file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › handle file upload errors gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display error screenshots" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › lazy load images in gallery" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display chart visualizations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › print error report" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › generate shareable link" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › receive real-time error notifications" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › sync status updates across sessions" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/upload.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-firefox" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="File Upload and Analysis › should upload Excel file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload CSV file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload log file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject invalid file types" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject files larger than limit" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should trigger AI analysis after upload" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display error detection results" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display AI suggestions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display ML predictions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should navigate to error details" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should handle upload errors gracefully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/auth.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Authentication › should display login page" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should login with Google successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should display user profile after login" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should logout successfully" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should persist session on page reload" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication › should handle authentication errors" classname="e2e/auth.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/dashboard.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-webkit" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Error Dashboard › should display dashboard with error statistics" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error severity breakdown" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by store" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by kiosk" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should filter errors by date range" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should apply multiple filters together" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should clear all filters" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should search errors by keyword" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should paginate through error results" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should change items per page" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by severity" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should sort errors by date" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to CSV" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should export errors to Excel" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display error details on click" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should mark error as resolved" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Error Dashboard › should display real-time updates" classname="e2e/dashboard.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/enhanced.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-webkit" tests="40" failures="0" skipped="40" time="0" errors="0">
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › concurrent users editing same error" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Multi-User Scenarios › collaborative analysis workflow" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle network failures gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle API errors and retry" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle session timeout" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle upload errors and validation" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Error Scenarios › handle ML training failures" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle large datasets efficiently" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle rapid filter changes without lag" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Performance Scenarios › handle concurrent API requests" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › prevent unauthorized access to admin pages" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › sanitize user input to prevent XSS" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Security Scenarios › validate CSRF protection" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › verify data consistency across operations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Data Integrity › handle optimistic updates correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › keyboard navigation works correctly" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › screen reader support" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Accessibility › color contrast meets WCAG standards" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Chromium" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in Firefox" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › works in WebKit/Safari" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles CSS Grid across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Cross-Browser Compatibility › handles Flexbox across browsers" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone SE viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPhone 12 Pro viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › iPad Pro viewport (landscape)" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Mobile Viewport › Android phone viewport" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error report as PDF" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › download error log as text file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › export multiple errors to Excel" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › upload and process CSV file" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - File Operations › handle file upload errors gracefully" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display error screenshots" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › lazy load images in gallery" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Media and Assets › display chart visualizations" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › print error report" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Print and Export › generate shareable link" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › receive real-time error notifications" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced E2E Tests - Real-time Features › sync status updates across sessions" classname="e2e/enhanced.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="e2e/upload.test.ts" timestamp="2025-10-08T05:39:38.261Z" hostname="e2e-webkit" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="File Upload and Analysis › should upload Excel file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload CSV file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should upload log file successfully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject invalid file types" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should reject files larger than limit" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should trigger AI analysis after upload" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display error detection results" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display AI suggestions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should display ML predictions" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should navigate to error details" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload and Analysis › should handle upload errors gracefully" classname="e2e/upload.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>